I Approach (Using Bit Manipulation)

class Solution {
public:
    bool doesValidArrayExist(vector<int>& derived) {
        int n=derived.size();
        

        vector<int> first(n);
        vector<int> second(n);

        for(int i=0;i<n-1;i++)
        {
            if(i==0)
            {
                if(derived[i])
                {
                    first[i+1]=1;
                    second[i]=1;
                }
                else
                {
                    second[i]=1;
                    second[i+1]=1;
                }
            }
            else
            {
                if(derived[i])
                {
                    if(first[i]==0)
                        first[i+1]=1;

                    if(second[i]==0)
                        second[i+1]=1;
                }
                else
                {
                    if(first[i])
                        first[i+1]=1;

                    if(second[i])
                        second[i+1]=1;
                }
            }
        }

        if(derived[n-1])
        {
            if(first[n-1]!=first[0] || second[n-1]!=second[0])
                return true;
            else
                return false;
        }
        else
        {
            if(first[n-1]==first[0] || second[n-1]==second[0])
                return true;
            else
                return false;
        }
    }
};

Time Complexity: O(n)
Space Complexity: O(2*n)~O(n) 
where, 'n' is the size of the given array 'derived'.

II Approach (Using Bit Manipulation More Optimal/Efficient)

class Solution {
public:
    bool doesValidArrayExist(vector<int>& derived) {
        int n=derived.size();
        int XOR=0;

        for(int i=0;i<n;i++)
        {
            XOR=XOR^derived[i];
        }

        return XOR==0;
    }
};

Time Complexity: O(n)
Space Complexity: O(1) 
where, 'n' is the size of the given array 'derived'.

III Approach (Using Count of one's in derived array)

class Solution {
public:
    bool doesValidArrayExist(vector<int>& derived) {
        int n=derived.size();
        int count=0;

        for(int i=0;i<n;i++)
        {
            if(derived[i])
		count++;
        }

        return count%2==0;
    }
};

Time Complexity: O(n)
Space Complexity: O(1) 
where, 'n' is the size of the given array 'derived'.
